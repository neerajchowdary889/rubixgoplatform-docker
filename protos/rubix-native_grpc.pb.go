// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: rubix-native.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RubixService_GetDIDChallenge_FullMethodName       = "/protos.RubixService/GetDIDChallenge"
	RubixService_GetDIDAccess_FullMethodName          = "/protos.RubixService/GetDIDAccess"
	RubixService_CreateDID_FullMethodName             = "/protos.RubixService/CreateDID"
	RubixService_GetAllTokens_FullMethodName          = "/protos.RubixService/GetAllTokens"
	RubixService_TransferRBT_FullMethodName           = "/protos.RubixService/TransferRBT"
	RubixService_CreateDataToken_FullMethodName       = "/protos.RubixService/CreateDataToken"
	RubixService_CommitDataToken_FullMethodName       = "/protos.RubixService/CommitDataToken"
	RubixService_StreamIncomingTxn_FullMethodName     = "/protos.RubixService/StreamIncomingTxn"
	RubixService_StreamSignature_FullMethodName       = "/protos.RubixService/StreamSignature"
	RubixService_GenerateRBT_FullMethodName           = "/protos.RubixService/GenerateRBT"
	RubixService_GetBalance_FullMethodName            = "/protos.RubixService/GetBalance"
	RubixService_GetTransactionHistory_FullMethodName = "/protos.RubixService/GetTransactionHistory"
)

// RubixServiceClient is the client API for RubixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RubixServiceClient interface {
	GetDIDChallenge(ctx context.Context, in *ChallengeReq, opts ...grpc.CallOption) (*ChallengeResp, error)
	GetDIDAccess(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*Token, error)
	CreateDID(ctx context.Context, in *CreateDIDReq, opts ...grpc.CallOption) (*CreateDIDRes, error)
	GetAllTokens(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error)
	TransferRBT(ctx context.Context, in *TransferRBTReq, opts ...grpc.CallOption) (*BasicReponse, error)
	CreateDataToken(ctx context.Context, in *DataTokenReq, opts ...grpc.CallOption) (*BasicReponse, error)
	CommitDataToken(ctx context.Context, in *CommitDataTokenReq, opts ...grpc.CallOption) (*BasicReponse, error)
	StreamIncomingTxn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (RubixService_StreamIncomingTxnClient, error)
	StreamSignature(ctx context.Context, opts ...grpc.CallOption) (RubixService_StreamSignatureClient, error)
	GenerateRBT(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*BasicReponse, error)
	GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceRes, error)
	GetTransactionHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransactionHistory, error)
}

type rubixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRubixServiceClient(cc grpc.ClientConnInterface) RubixServiceClient {
	return &rubixServiceClient{cc}
}

func (c *rubixServiceClient) GetDIDChallenge(ctx context.Context, in *ChallengeReq, opts ...grpc.CallOption) (*ChallengeResp, error) {
	out := new(ChallengeResp)
	err := c.cc.Invoke(ctx, RubixService_GetDIDChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) GetDIDAccess(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, RubixService_GetDIDAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) CreateDID(ctx context.Context, in *CreateDIDReq, opts ...grpc.CallOption) (*CreateDIDRes, error) {
	out := new(CreateDIDRes)
	err := c.cc.Invoke(ctx, RubixService_CreateDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) GetAllTokens(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error) {
	out := new(TokenResp)
	err := c.cc.Invoke(ctx, RubixService_GetAllTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) TransferRBT(ctx context.Context, in *TransferRBTReq, opts ...grpc.CallOption) (*BasicReponse, error) {
	out := new(BasicReponse)
	err := c.cc.Invoke(ctx, RubixService_TransferRBT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) CreateDataToken(ctx context.Context, in *DataTokenReq, opts ...grpc.CallOption) (*BasicReponse, error) {
	out := new(BasicReponse)
	err := c.cc.Invoke(ctx, RubixService_CreateDataToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) CommitDataToken(ctx context.Context, in *CommitDataTokenReq, opts ...grpc.CallOption) (*BasicReponse, error) {
	out := new(BasicReponse)
	err := c.cc.Invoke(ctx, RubixService_CommitDataToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) StreamIncomingTxn(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (RubixService_StreamIncomingTxnClient, error) {
	stream, err := c.cc.NewStream(ctx, &RubixService_ServiceDesc.Streams[0], RubixService_StreamIncomingTxn_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rubixServiceStreamIncomingTxnClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RubixService_StreamIncomingTxnClient interface {
	Recv() (*IncomingTxnDetails, error)
	grpc.ClientStream
}

type rubixServiceStreamIncomingTxnClient struct {
	grpc.ClientStream
}

func (x *rubixServiceStreamIncomingTxnClient) Recv() (*IncomingTxnDetails, error) {
	m := new(IncomingTxnDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rubixServiceClient) StreamSignature(ctx context.Context, opts ...grpc.CallOption) (RubixService_StreamSignatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &RubixService_ServiceDesc.Streams[1], RubixService_StreamSignature_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rubixServiceStreamSignatureClient{stream}
	return x, nil
}

type RubixService_StreamSignatureClient interface {
	Send(*SignResponse) error
	Recv() (*BasicReponse, error)
	grpc.ClientStream
}

type rubixServiceStreamSignatureClient struct {
	grpc.ClientStream
}

func (x *rubixServiceStreamSignatureClient) Send(m *SignResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rubixServiceStreamSignatureClient) Recv() (*BasicReponse, error) {
	m := new(BasicReponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rubixServiceClient) GenerateRBT(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*BasicReponse, error) {
	out := new(BasicReponse)
	err := c.cc.Invoke(ctx, RubixService_GenerateRBT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceRes, error) {
	out := new(GetBalanceRes)
	err := c.cc.Invoke(ctx, RubixService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubixServiceClient) GetTransactionHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransactionHistory, error) {
	out := new(TransactionHistory)
	err := c.cc.Invoke(ctx, RubixService_GetTransactionHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RubixServiceServer is the server API for RubixService service.
// All implementations must embed UnimplementedRubixServiceServer
// for forward compatibility
type RubixServiceServer interface {
	GetDIDChallenge(context.Context, *ChallengeReq) (*ChallengeResp, error)
	GetDIDAccess(context.Context, *AccessReq) (*Token, error)
	CreateDID(context.Context, *CreateDIDReq) (*CreateDIDRes, error)
	GetAllTokens(context.Context, *TokenReq) (*TokenResp, error)
	TransferRBT(context.Context, *TransferRBTReq) (*BasicReponse, error)
	CreateDataToken(context.Context, *DataTokenReq) (*BasicReponse, error)
	CommitDataToken(context.Context, *CommitDataTokenReq) (*BasicReponse, error)
	StreamIncomingTxn(*emptypb.Empty, RubixService_StreamIncomingTxnServer) error
	StreamSignature(RubixService_StreamSignatureServer) error
	GenerateRBT(context.Context, *GenerateReq) (*BasicReponse, error)
	GetBalance(context.Context, *emptypb.Empty) (*GetBalanceRes, error)
	GetTransactionHistory(context.Context, *emptypb.Empty) (*TransactionHistory, error)
	mustEmbedUnimplementedRubixServiceServer()
}

// UnimplementedRubixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRubixServiceServer struct {
}

func (UnimplementedRubixServiceServer) GetDIDChallenge(context.Context, *ChallengeReq) (*ChallengeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDIDChallenge not implemented")
}
func (UnimplementedRubixServiceServer) GetDIDAccess(context.Context, *AccessReq) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDIDAccess not implemented")
}
func (UnimplementedRubixServiceServer) CreateDID(context.Context, *CreateDIDReq) (*CreateDIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDID not implemented")
}
func (UnimplementedRubixServiceServer) GetAllTokens(context.Context, *TokenReq) (*TokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokens not implemented")
}
func (UnimplementedRubixServiceServer) TransferRBT(context.Context, *TransferRBTReq) (*BasicReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferRBT not implemented")
}
func (UnimplementedRubixServiceServer) CreateDataToken(context.Context, *DataTokenReq) (*BasicReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataToken not implemented")
}
func (UnimplementedRubixServiceServer) CommitDataToken(context.Context, *CommitDataTokenReq) (*BasicReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitDataToken not implemented")
}
func (UnimplementedRubixServiceServer) StreamIncomingTxn(*emptypb.Empty, RubixService_StreamIncomingTxnServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIncomingTxn not implemented")
}
func (UnimplementedRubixServiceServer) StreamSignature(RubixService_StreamSignatureServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSignature not implemented")
}
func (UnimplementedRubixServiceServer) GenerateRBT(context.Context, *GenerateReq) (*BasicReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRBT not implemented")
}
func (UnimplementedRubixServiceServer) GetBalance(context.Context, *emptypb.Empty) (*GetBalanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedRubixServiceServer) GetTransactionHistory(context.Context, *emptypb.Empty) (*TransactionHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedRubixServiceServer) mustEmbedUnimplementedRubixServiceServer() {}

// UnsafeRubixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RubixServiceServer will
// result in compilation errors.
type UnsafeRubixServiceServer interface {
	mustEmbedUnimplementedRubixServiceServer()
}

func RegisterRubixServiceServer(s grpc.ServiceRegistrar, srv RubixServiceServer) {
	s.RegisterService(&RubixService_ServiceDesc, srv)
}

func _RubixService_GetDIDChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).GetDIDChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_GetDIDChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).GetDIDChallenge(ctx, req.(*ChallengeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_GetDIDAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).GetDIDAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_GetDIDAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).GetDIDAccess(ctx, req.(*AccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_CreateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).CreateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_CreateDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).CreateDID(ctx, req.(*CreateDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_GetAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).GetAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_GetAllTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).GetAllTokens(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_TransferRBT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRBTReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).TransferRBT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_TransferRBT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).TransferRBT(ctx, req.(*TransferRBTReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_CreateDataToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).CreateDataToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_CreateDataToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).CreateDataToken(ctx, req.(*DataTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_CommitDataToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitDataTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).CommitDataToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_CommitDataToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).CommitDataToken(ctx, req.(*CommitDataTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_StreamIncomingTxn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RubixServiceServer).StreamIncomingTxn(m, &rubixServiceStreamIncomingTxnServer{stream})
}

type RubixService_StreamIncomingTxnServer interface {
	Send(*IncomingTxnDetails) error
	grpc.ServerStream
}

type rubixServiceStreamIncomingTxnServer struct {
	grpc.ServerStream
}

func (x *rubixServiceStreamIncomingTxnServer) Send(m *IncomingTxnDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _RubixService_StreamSignature_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RubixServiceServer).StreamSignature(&rubixServiceStreamSignatureServer{stream})
}

type RubixService_StreamSignatureServer interface {
	Send(*BasicReponse) error
	Recv() (*SignResponse, error)
	grpc.ServerStream
}

type rubixServiceStreamSignatureServer struct {
	grpc.ServerStream
}

func (x *rubixServiceStreamSignatureServer) Send(m *BasicReponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rubixServiceStreamSignatureServer) Recv() (*SignResponse, error) {
	m := new(SignResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RubixService_GenerateRBT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).GenerateRBT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_GenerateRBT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).GenerateRBT(ctx, req.(*GenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).GetBalance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubixService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubixServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubixService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubixServiceServer).GetTransactionHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RubixService_ServiceDesc is the grpc.ServiceDesc for RubixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RubixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RubixService",
	HandlerType: (*RubixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDIDChallenge",
			Handler:    _RubixService_GetDIDChallenge_Handler,
		},
		{
			MethodName: "GetDIDAccess",
			Handler:    _RubixService_GetDIDAccess_Handler,
		},
		{
			MethodName: "CreateDID",
			Handler:    _RubixService_CreateDID_Handler,
		},
		{
			MethodName: "GetAllTokens",
			Handler:    _RubixService_GetAllTokens_Handler,
		},
		{
			MethodName: "TransferRBT",
			Handler:    _RubixService_TransferRBT_Handler,
		},
		{
			MethodName: "CreateDataToken",
			Handler:    _RubixService_CreateDataToken_Handler,
		},
		{
			MethodName: "CommitDataToken",
			Handler:    _RubixService_CommitDataToken_Handler,
		},
		{
			MethodName: "GenerateRBT",
			Handler:    _RubixService_GenerateRBT_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _RubixService_GetBalance_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _RubixService_GetTransactionHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIncomingTxn",
			Handler:       _RubixService_StreamIncomingTxn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSignature",
			Handler:       _RubixService_StreamSignature_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rubix-native.proto",
}
