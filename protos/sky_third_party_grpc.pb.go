// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: sky_third_party.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SkyThirdPartyService_GetQRInfo_FullMethodName = "/protos.SkyThirdPartyService/GetQRInfo"
)

// SkyThirdPartyServiceClient is the client API for SkyThirdPartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkyThirdPartyServiceClient interface {
	GetQRInfo(ctx context.Context, in *QRInfoRequest, opts ...grpc.CallOption) (*QRInfoResponse, error)
}

type skyThirdPartyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkyThirdPartyServiceClient(cc grpc.ClientConnInterface) SkyThirdPartyServiceClient {
	return &skyThirdPartyServiceClient{cc}
}

func (c *skyThirdPartyServiceClient) GetQRInfo(ctx context.Context, in *QRInfoRequest, opts ...grpc.CallOption) (*QRInfoResponse, error) {
	out := new(QRInfoResponse)
	err := c.cc.Invoke(ctx, SkyThirdPartyService_GetQRInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkyThirdPartyServiceServer is the server API for SkyThirdPartyService service.
// All implementations must embed UnimplementedSkyThirdPartyServiceServer
// for forward compatibility
type SkyThirdPartyServiceServer interface {
	GetQRInfo(context.Context, *QRInfoRequest) (*QRInfoResponse, error)
	mustEmbedUnimplementedSkyThirdPartyServiceServer()
}

// UnimplementedSkyThirdPartyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSkyThirdPartyServiceServer struct {
}

func (UnimplementedSkyThirdPartyServiceServer) GetQRInfo(context.Context, *QRInfoRequest) (*QRInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQRInfo not implemented")
}
func (UnimplementedSkyThirdPartyServiceServer) mustEmbedUnimplementedSkyThirdPartyServiceServer() {}

// UnsafeSkyThirdPartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkyThirdPartyServiceServer will
// result in compilation errors.
type UnsafeSkyThirdPartyServiceServer interface {
	mustEmbedUnimplementedSkyThirdPartyServiceServer()
}

func RegisterSkyThirdPartyServiceServer(s grpc.ServiceRegistrar, srv SkyThirdPartyServiceServer) {
	s.RegisterService(&SkyThirdPartyService_ServiceDesc, srv)
}

func _SkyThirdPartyService_GetQRInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkyThirdPartyServiceServer).GetQRInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkyThirdPartyService_GetQRInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkyThirdPartyServiceServer).GetQRInfo(ctx, req.(*QRInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SkyThirdPartyService_ServiceDesc is the grpc.ServiceDesc for SkyThirdPartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkyThirdPartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SkyThirdPartyService",
	HandlerType: (*SkyThirdPartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQRInfo",
			Handler:    _SkyThirdPartyService_GetQRInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sky_third_party.proto",
}
